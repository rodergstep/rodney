{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["$('#mainMenuToggler').click(function() {\n  $(this).toggleClass('is-open');\n  const windowWidth = $(window).width();\n  if (windowWidth > 1200) {\n    $('#mainMenu > .nav-item:lt(5)').toggleClass('opened');\n  } else {\n    $('#mainMenu').animate({ opacity: 'toggle', width: '100%', height: 'toggle' }, 400, () => {\n      // Animation complete.\n    });\n  }\n});\n$(document).ready(() => {\n  //activate wow.js\n  if (document.querySelector('.wow')) {\n    new WOW().init();\n  }\n  // sticky nav\n  var nav = document.querySelector('.header');\n  var topofNav = +nav.offsetHeight;\n  function fixNav() {\n    if (window.scrollY >= 50) {\n      document.body.classList.add('header-bg-white');\n    } else {\n      document.body.classList.remove('header-bg-white');\n    }\n  }\n  window.addEventListener('scroll', fixNav);\n  // filter\n  $('.filter__nav-btn').click(function() {\n    var $filter = this.closest('.filter');\n    var $filterDataValue = $(this).data('filter');\n    $($filter).find('.is-current').removeClass('is-current');\n    $(this).addClass('is-current');\n    if ($filterDataValue === 'all') {\n      $($filter).find('.filter__block').show();\n    } else {\n      $($filter).find('.filter__block:not([data-filter=' + $filterDataValue + '])').hide();\n      $($filter).find('.filter__block[data-filter=' + $filterDataValue + ']').show();\n    }\n  });\n  // end filter\n  // Block reveal effects\n  // Helper vars and functions.\n  function extend(a, b) {\n    for (var key in b) {\n      if (b.hasOwnProperty(key)) {\n        a[key] = b[key];\n      }\n    }\n    return a;\n  }\n\n  function createDOMEl(type, className, content) {\n    var el = document.createElement(type);\n    el.className = className || '';\n    el.innerHTML = content || '';\n    return el;\n  }\n\n  /**\n\t * RevealFx obj.\n\t */\n  function RevealFx(el, options) {\n    this.el = el;\n    this.options = extend({}, this.options);\n    extend(this.options, options);\n    this._init();\n  }\n\n  /**\n\t * RevealFx options.\n\t */\n  RevealFx.prototype.options = {\n    // If true, then the content will be hidden until it´s \"revealed\".\n    isContentHidden: true,\n    // The animation/reveal settings. This can be set initially or passed when calling the reveal method.\n    revealSettings: {\n      // Animation direction: left right (lr) || right left (rl) || top bottom (tb) || bottom top (bt).\n      direction: 'lr',\n      // Revealer´s background color.\n      bgcolor: '#f0f0f0',\n      // Animation speed. This is the speed to \"cover\" and also \"uncover\" the element (seperately, not the total time).\n      duration: 500,\n      // Animation easing. This is the easing to \"cover\" and also \"uncover\" the element.\n      easing: 'easeInOutQuint',\n      // percentage-based value representing how much of the area should be left covered.\n      coverArea: 0,\n      // Callback for when the revealer is covering the element (halfway through of the whole animation).\n      onCover: function(contentEl, revealerEl) {\n        return false;\n      },\n      // Callback for when the animation starts (animation start).\n      onStart: function(contentEl, revealerEl) {\n        return false;\n      },\n      // Callback for when the revealer has completed uncovering (animation end).\n      onComplete: function(contentEl, revealerEl) {\n        return false;\n      },\n    },\n  };\n\n  /**\n\t * Init.\n\t */\n  RevealFx.prototype._init = function() {\n    this._layout();\n  };\n\n  /**\n\t * Build the necessary structure.\n\t */\n  RevealFx.prototype._layout = function() {\n    var position = getComputedStyle(this.el).position;\n    if (position !== 'fixed' && position !== 'absolute' && position !== 'relative') {\n      this.el.style.position = 'relative';\n    }\n    // Content element.\n    this.content = createDOMEl('div', 'block-revealer__content', this.el.innerHTML);\n    if (this.options.isContentHidden) {\n      this.content.style.opacity = 0;\n    }\n    // Revealer element (the one that animates)\n    this.revealer = createDOMEl('div', 'block-revealer__element');\n    this.el.classList.add('block-revealer');\n    this.el.innerHTML = '';\n    this.el.appendChild(this.content);\n    this.el.appendChild(this.revealer);\n  };\n\n  /**\n\t * Gets the revealer element´s transform and transform origin.\n\t */\n  RevealFx.prototype._getTransformSettings = function(direction) {\n    var val, origin, origin_2;\n\n    switch (direction) {\n      case 'lr':\n        val = 'scale3d(0,1,1)';\n        origin = '0 50%';\n        origin_2 = '100% 50%';\n        break;\n      case 'rl':\n        val = 'scale3d(0,1,1)';\n        origin = '100% 50%';\n        origin_2 = '0 50%';\n        break;\n      case 'tb':\n        val = 'scale3d(1,0,1)';\n        origin = '50% 0';\n        origin_2 = '50% 100%';\n        break;\n      case 'bt':\n        val = 'scale3d(1,0,1)';\n        origin = '50% 100%';\n        origin_2 = '50% 0';\n        break;\n      default:\n        val = 'scale3d(0,1,1)';\n        origin = '0 50%';\n        origin_2 = '100% 50%';\n        break;\n    }\n\n    return {\n      // transform value.\n      val: val,\n      // initial and halfway/final transform origin.\n      origin: { initial: origin, halfway: origin_2 },\n    };\n  };\n\n  /**\n\t * Reveal animation. If revealSettings is passed, then it will overwrite the options.revealSettings.\n\t */\n  RevealFx.prototype.reveal = function(revealSettings) {\n    // Do nothing if currently animating.\n    if (this.isAnimating) {\n      return false;\n    }\n    this.isAnimating = true;\n\n    // Set the revealer element´s transform and transform origin.\n    var defaults = {\n      // In case revealSettings is incomplete, its properties deafault to:\n      duration: 500,\n      easing: 'easeInOutQuint',\n      delay: 0,\n      bgcolor: '#f0f0f0',\n      direction: 'lr',\n      coverArea: 0,\n    },\n      revealSettings = revealSettings || this.options.revealSettings,\n      direction = revealSettings.direction || defaults.direction,\n      transformSettings = this._getTransformSettings(direction);\n\n    this.revealer.style.WebkitTransform = this.revealer.style.transform = transformSettings.val;\n    this.revealer.style.WebkitTransformOrigin = this.revealer.style.transformOrigin = transformSettings.origin.initial;\n\n    // Set the Revealer´s background color.\n    this.revealer.style.backgroundColor = revealSettings.bgcolor || defaults.bgcolor;\n\n    // Show it. By default the revealer element has opacity = 0 (CSS).\n    this.revealer.style.opacity = 1;\n\n    // Animate it.\n    var self = this,\n      // Second animation step.\n      animationSettings_2 = {\n        complete: function() {\n          self.isAnimating = false;\n          if (typeof revealSettings.onComplete === 'function') {\n            revealSettings.onComplete(self.content, self.revealer);\n          }\n        },\n      },\n      // First animation step.\n      animationSettings = {\n        delay: revealSettings.delay || defaults.delay,\n        complete: function() {\n          self.revealer.style.WebkitTransformOrigin = self.revealer.style.transformOrigin = transformSettings.origin.halfway;\n          if (typeof revealSettings.onCover === 'function') {\n            revealSettings.onCover(self.content, self.revealer);\n          }\n          anime(animationSettings_2);\n        },\n      };\n\n    animationSettings.targets = animationSettings_2.targets = this.revealer;\n    animationSettings.duration = animationSettings_2.duration = revealSettings.duration ||\n      defaults.duration;\n    animationSettings.easing = animationSettings_2.easing = revealSettings.easing ||\n      defaults.easing;\n\n    var coverArea = revealSettings.coverArea || defaults.coverArea;\n    if (direction === 'lr' || direction === 'rl') {\n      animationSettings.scaleX = [ 0, 1 ];\n      animationSettings_2.scaleX = [ 1, coverArea / 100 ];\n    } else {\n      animationSettings.scaleY = [ 0, 1 ];\n      animationSettings_2.scaleY = [ 1, coverArea / 100 ];\n    }\n\n    if (typeof revealSettings.onStart === 'function') {\n      revealSettings.onStart(self.content, self.revealer);\n    }\n    anime(animationSettings);\n  };\n\n  window.RevealFx = RevealFx;\n  // end Block reveal effects\n  var watcher = [];\n  var reveal = [];\n  $('.rev-effect').each(function(i) {\n    watcher[i] = scrollMonitor.create($(this)[0], -300);\n    var direction = $(this).hasClass('rev-effect--rl') ? 'rl' : 'lr';\n    reveal[i] = new RevealFx($(this)[0], {\n      revealSettings: {\n        bgcolor: 'grey',\n        direction: direction,\n        onCover: function(contentEl, revealerEl) {\n          contentEl.style.opacity = 1;\n        },\n      },\n    });\n    watcher[i].enterViewport(function() {\n      reveal[i].reveal();\n      watcher[i].destroy();\n    });\n  });\n  // Google Map\n  let googleMapsLoaded = false;\n  var locations = [\n    [ 'Bondi Beach', -33.890542, 151.274856, 4 ],\n    [ 'Coogee Beach', -33.923036, 151.259052, 5 ],\n    [ 'Cronulla Beach', -34.028249, 151.157507, 3 ],\n    [ 'Manly Beach', -33.80010128657071, 151.28747820854187, 2 ],\n    [ 'Maroubra Beach', -33.950198, 151.259302, 1 ],\n  ];\n  window.initMaps = function() {\n    const $maps = $('.map-canvas');\n    if ($maps.length) {\n      if (!googleMapsLoaded) {\n        const key = 'AIzaSyDe4WeeWQ8_mWVwzL0Z9j3S4MpM6Of17wo';\n        $\n          .getScript(`https://maps.google.com/maps/api/js?sensor=true&key=${key}`)\n          .done((script, textStatus) => {\n            googleMapsLoaded = true;\n            createMaps($maps);\n          })\n          .fail((jqxhr, settings, ex) => {\n          });\n      } else {\n        createMaps($maps);\n      }\n    }\n  };\n\n  window.createMaps = function($maps) {\n    $maps.each(function() {\n      let latitude = this.getAttribute('data-latitude');\n      let longitude = this.getAttribute('data-longitude');\n      if (!latitude && !longitude) {\n        latitude = '-34.028249';\n        longitude = '151.157507';\n      }\n      const mapOptions = {\n        zoom: 16,\n        center: new google.maps.LatLng(latitude, longitude),\n        marker: true,\n        scrollwheel: false,\n        mapTypeControl: false,\n        streetViewControl: false,\n        styles: [\n          {\n            featureType: 'all',\n            elementType: 'labels.text.fill',\n            stylers: [ { saturation: 36 }, { color: '#d5d5d5' }, { lightness: 40 } ],\n          },\n          {\n            featureType: 'all',\n            elementType: 'labels.text.stroke',\n            stylers: [ { visibility: 'on' }, { color: '#ffffff' }, { lightness: 16 } ],\n          },\n          { featureType: 'all', elementType: 'labels.icon', stylers: [ { visibility: 'off' } ] },\n          { featureType: 'administrative', elementType: 'all', stylers: [ { visibility: 'off' } ] },\n          {\n            featureType: 'administrative',\n            elementType: 'geometry.fill',\n            stylers: [ { color: '#fefefe' }, { lightness: 20 } ],\n          },\n          {\n            featureType: 'administrative',\n            elementType: 'geometry.stroke',\n            stylers: [ { color: '#fefefe' }, { lightness: 17 }, { weight: 1.2 } ],\n          },\n          {\n            featureType: 'landscape',\n            elementType: 'geometry',\n            stylers: [ { lightness: 20 }, { color: '#ececec' } ],\n          },\n          {\n            featureType: 'landscape.man_made',\n            elementType: 'all',\n            stylers: [ { visibility: 'on' }, { color: '#fafafa' } ],\n          },\n          {\n            featureType: 'landscape.man_made',\n            elementType: 'geometry.fill',\n            stylers: [ { visibility: 'on' }, { color: '#fafafa' } ],\n          },\n          {\n            featureType: 'landscape.man_made',\n            elementType: 'geometry.stroke',\n            stylers: [ { visibility: 'on' }, { color: '#eaeaea' } ],\n          },\n          {\n            featureType: 'landscape.natural',\n            elementType: 'all',\n            stylers: [ { visibility: 'on' }, { color: '#ececec' } ],\n          },\n          { featureType: 'poi', elementType: 'all', stylers: [ { visibility: 'on' } ] },\n          {\n            featureType: 'poi',\n            elementType: 'geometry',\n            stylers: [ { lightness: 21 }, { visibility: 'off' } ],\n          },\n          {\n            featureType: 'poi',\n            elementType: 'geometry.fill',\n            stylers: [ { visibility: 'on' }, { color: '#eaeaea' } ],\n          },\n          {\n            featureType: 'poi',\n            elementType: 'labels.text.fill',\n            stylers: [ { color: '#d5d5d5' } ],\n          },\n          { featureType: 'poi', elementType: 'labels.icon', stylers: [ { saturation: '-100' } ] },\n          { featureType: 'poi.attraction', elementType: 'all', stylers: [ { visibility: 'on' } ] },\n          { featureType: 'poi.business', elementType: 'all', stylers: [ { visibility: 'on' } ] },\n          { featureType: 'poi.government', elementType: 'all', stylers: [ { visibility: 'on' } ] },\n          { featureType: 'poi.medical', elementType: 'all', stylers: [ { visibility: 'on' } ] },\n          { featureType: 'poi.park', elementType: 'all', stylers: [ { visibility: 'on' } ] },\n          {\n            featureType: 'poi.park',\n            elementType: 'geometry',\n            stylers: [ { color: '#dedede' }, { lightness: 21 } ],\n          },\n          {\n            featureType: 'poi.place_of_worship',\n            elementType: 'all',\n            stylers: [ { visibility: 'on' } ],\n          },\n          { featureType: 'poi.school', elementType: 'all', stylers: [ { visibility: 'on' } ] },\n          {\n            featureType: 'poi.school',\n            elementType: 'geometry.stroke',\n            stylers: [ { lightness: '-61' }, { gamma: '0.00' }, { visibility: 'off' } ],\n          },\n          {\n            featureType: 'poi.sports_complex',\n            elementType: 'all',\n            stylers: [ { visibility: 'on' } ],\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'geometry.fill',\n            stylers: [ { color: '#ffffff' }, { lightness: 17 } ],\n          },\n          {\n            featureType: 'road.highway',\n            elementType: 'geometry.stroke',\n            stylers: [ { color: '#ffffff' }, { lightness: 29 }, { weight: 0.2 } ],\n          },\n          {\n            featureType: 'road.arterial',\n            elementType: 'geometry',\n            stylers: [ { color: '#ffffff' }, { lightness: 18 } ],\n          },\n          {\n            featureType: 'road.local',\n            elementType: 'geometry',\n            stylers: [ { color: '#ffffff' }, { lightness: 16 } ],\n          },\n          {\n            featureType: 'transit',\n            elementType: 'geometry',\n            stylers: [ { color: '#f2f2f2' }, { lightness: 19 } ],\n          },\n          {\n            featureType: 'water',\n            elementType: 'geometry',\n            stylers: [ { color: '#eaeaea' }, { lightness: 17 } ],\n          },\n        ],\n      };\n      const mapCanvas = $(this).get(0);\n      const map = new google.maps.Map(mapCanvas, mapOptions);\n      const myLatLong = new google.maps.LatLng(latitude, longitude);\n      // mapOptions.center = myLatLong;\n      var infowindow = new google.maps.InfoWindow();\n      var marker, i;\n\n      for (i = 0; i < locations.length; i++) {\n        marker = new google.maps.Marker({\n          position: new google.maps.LatLng(locations[i][1], locations[i][2]),\n          map: map,\n          icon: {\n            url: \"data:image/svg+xml;charset=utf8,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' width='21' height='23' viewBox='0 0 32 32'%3E%3Cpath d='M15.938 32c0 0-9.938-14.062-9.938-20.062 0-11.813 9.938-11.938 9.938-11.938s10.062 0.125 10.062 11.875c0 6.187-10.062 20.125-10.062 20.125zM16 6c-2.209 0-4 1.791-4 4s1.791 4 4 4 4-1.791 4-4-1.791-4-4-4z'%3E%3C/path%3E%3C/svg%3E\",\n          },\n        });\n\n        google.maps.event.addListener(\n          marker,\n          'click',\n          (function(marker, i) {\n            return function() {\n              infowindow.setContent(locations[i][0]);\n              infowindow.open(map, marker);\n            };\n          })(marker, i),\n        );\n      }\n    });\n  };\n  initMaps();\n  // Custom select\n  let x, i, j, selElmnt, a, b, c;\n  /* look for any elements with the class \"select-custom\": */\n  x = document.getElementsByClassName('select-custom');\n  for (i = 0; i < x.length; i++) {\n    selElmnt = x[i].getElementsByTagName('select')[0];\n    /* for each element, create a new DIV that will act as the selected item: */\n    a = document.createElement('DIV');\n    a.setAttribute('class', 'select-selected');\n    a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;\n    x[i].appendChild(a);\n    /* for each element, create a new DIV that will contain the option list: */\n    b = document.createElement('DIV');\n    b.setAttribute('class', 'select-items select-hide');\n    for (j = 1; j < selElmnt.length; j++) {\n      /* for each option in the original select element,\n    create a new DIV that will act as an option item: */\n      c = document.createElement('DIV');\n      c.innerHTML = selElmnt.options[j].innerHTML;\n      c.addEventListener('click', function(e) {\n        /* when an item is clicked, update the original select box,\n        and the selected item: */\n        let y, i, k, s, h;\n        s = this.parentNode.parentNode.getElementsByTagName('select')[0];\n        h = this.parentNode.previousSibling;\n        for (i = 0; i < s.length; i++) {\n          if (s.options[i].innerHTML == this.innerHTML) {\n            s.selectedIndex = i;\n            h.innerHTML = this.innerHTML;\n            y = this.parentNode.getElementsByClassName('same-as-selected');\n            for (k = 0; k < y.length; k++) {\n              y[k].removeAttribute('class');\n            }\n            this.setAttribute('class', 'same-as-selected');\n            break;\n          }\n        }\n        h.click();\n      });\n      b.appendChild(c);\n    }\n    x[i].appendChild(b);\n    a.addEventListener('click', function(e) {\n      /* when the select box is clicked, close any other select boxes,\n      and open/close the current select box: */\n      e.stopPropagation();\n      closeAllSelect(this);\n      this.nextSibling.classList.toggle('select-hide');\n      this.classList.toggle('select-arrow-active');\n    });\n  }\n  function closeAllSelect(elmnt) {\n    /* a function that will close all select boxes in the document,\n  except the current select box: */\n    let x, y, i, arrNo = [];\n    x = document.getElementsByClassName('select-items');\n    y = document.getElementsByClassName('select-selected');\n    for (i = 0; i < y.length; i++) {\n      if (elmnt == y[i]) {\n        arrNo.push(i);\n      } else {\n        y[i].classList.remove('select-arrow-active');\n      }\n    }\n    for (i = 0; i < x.length; i++) {\n      if (arrNo.indexOf(i)) {\n        x[i].classList.add('select-hide');\n      }\n    }\n  }\n  /* if the user clicks anywhere outside the select box,\nthen close all select boxes: */\n  document.addEventListener('click', closeAllSelect);\n});\n\n// Smooth scroll\nvar $window = $(window);\n//Window object\nvar scrollTime = 0.3;\n//Scroll time\nvar scrollDistance = 120;\n\n//Distance. Use smaller value for shorter scroll and greater value for longer scroll\n$window.on('mousewheel DOMMouseScroll', function(event) {\n  event.preventDefault();\n\n  var delta = event.originalEvent.wheelDelta / 120 || (-event.originalEvent.detail) / 3;\n  var scrollTop = $window.scrollTop();\n  var finalScroll = scrollTop - parseInt(delta * scrollDistance);\n\n  TweenMax.to($window, scrollTime, {\n    scrollTo: { y: finalScroll, autoKill: true },\n    ease: Power1.easeOut,\n    //For more easing functions see https://api.greensock.com/js/com/greensock/easing/package-detail.html\n    autoKill: true,\n    overwrite: 5,\n  });\n});\n// Smooth scroll\n// Parallax\nvar item = document.querySelector('.parallax-item');\nif (item) {\n  var size = document.body.clientHeight;\n\n  var animation = TweenLite.to('.parallax-target', 1, {\n    yPercent: -25,\n    ease: Linear.easeNone,\n    paused: true,\n  });\n\n  window.addEventListener('load', function() {\n    TweenLite.ticker.addEventListener('tick', update);\n  });\n\n  function update() {\n    var min = item.offsetTop - size;\n    var max = item.offsetTop + item.offsetHeight;\n\n    var norm = clamp(normalize(window.pageYOffset, min, max), 0, 1);\n\n    animation.progress(norm);\n  }\n\n  function normalize(value, min, max) {\n    return (value - min) / (max - min);\n  }\n\n  function clamp(value, min, max) {\n    return value < min ? min : value > max ? max : value;\n  }\n}\n// Parallax\n// Video from youtube\nfunction findVideos() {\n  let videos = document.querySelectorAll('.video');\n\n  for (let i = 0; i < videos.length; i++) {\n    setupVideo(videos[i]);\n  }\n}\n\nfunction setupVideo(video) {\n  let link = video.querySelector('.video__link');\n  let media = video.querySelector('.video__media');\n  let button = video.querySelector('.video__button');\n  let id = parseMediaURL(media);\n\n  video.addEventListener('click', () => {\n    let iframe = createIframe(id);\n\n    link.remove();\n    button.remove();\n    video.appendChild(iframe);\n  });\n\n  link.removeAttribute('href');\n  video.classList.add('video--enabled');\n}\n\nfunction parseMediaURL(media) {\n  let regexp = /https:\\/\\/i\\.ytimg\\.com\\/vi\\/([a-zA-Z0-9_-]+)\\/maxresdefault\\.jpg/i;\n  let url = media.src;\n  let match = url.match(regexp);\n\n  return match[1];\n}\n\nfunction createIframe(id) {\n  let iframe = document.createElement('iframe');\n\n  iframe.setAttribute('allowfullscreen', '');\n  iframe.setAttribute('allow', 'autoplay');\n  iframe.setAttribute('src', generateURL(id));\n  iframe.classList.add('video__media');\n\n  return iframe;\n}\n\nfunction generateURL(id) {\n  let query = '?rel=0&showinfo=0&autoplay=1';\n\n  return 'https://www.youtube.com/embed/' + id + query;\n}\n\nfindVideos();\n// edn Video from youtube\n"],"file":"app.js"}